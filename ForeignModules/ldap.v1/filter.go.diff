*** filter.go.orig	2015-09-17 10:40:06.000000000 +0300
--- filter.go	2015-09-17 13:31:42.000000000 +0300
***************
*** 8,13 ****
--- 8,14 ----
  	"errors"
  	"fmt"
  	"strings"
+ 	"regexp"
  
  	"gopkg.in/asn1-ber.v1"
  )
***************
*** 164,169 ****
--- 165,172 ----
  		}
  	}()
  
+ 	asciiChechRegexp:=regexp.MustCompile(`[0-9A-Za-z\ \*\-\_]`)
+ 
  	newPos := pos
  	switch filter[pos] {
  	case '(':
***************
*** 190,196 ****
  		for newPos < len(filter) && filter[newPos] != ')' {
  			switch {
  			case packet != nil:
- 				condition += fmt.Sprintf("%c", filter[newPos])
  			case filter[newPos] == '=':
  				packet = ber.Encode(ber.ClassContext, ber.TypeConstructed, FilterEqualityMatch, nil, FilterMap[FilterEqualityMatch])
  			case filter[newPos] == '>' && filter[newPos+1] == '=':
--- 193,207 ----
  		for newPos < len(filter) && filter[newPos] != ')' {
  			switch {
  			case packet != nil:
+ 				if !asciiChechRegexp.MatchString(fmt.Sprintf("%c", filter[newPos])) {
+ //					fmt.Printf("DEBUG RU:%s / %s / %d\n", filter, filter[newPos:newPos+2], newPos)
+ 					condition += fmt.Sprintf("%s", filter[newPos:newPos+2])
+ 					newPos++
+ 				}else{ 
+ //					fmt.Printf("DEBUG EN:%s / %c / %d\n", filter, filter[newPos], newPos)
+ 					condition += fmt.Sprintf("%c", filter[newPos])
+ 				}
+ //				fmt.Printf("DEBUG TT:%v\n", condition)
  			case filter[newPos] == '=':
  				packet = ber.Encode(ber.ClassContext, ber.TypeConstructed, FilterEqualityMatch, nil, FilterMap[FilterEqualityMatch])
  			case filter[newPos] == '>' && filter[newPos+1] == '=':
